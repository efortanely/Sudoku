import java.applet.Applet;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Random;

public class Sudoku extends Applet implements MouseListener, KeyListener, ComponentListener{
	static int[] flaggedCoordinate;
	int[][] puzzle = new int[9][9];
	boolean[][] init = new boolean[9][9];
	final int FLAGGED = -1, RESET = 0, EASY = 1, MEDIUM = 2, HARD = 3, XTREME = 4;
	int size, gameMode = EASY;
	
	@Override
	public void init(){
		size = getWidth()/9;
		addMouseListener(this);
		addKeyListener(this);
		addComponentListener(this);
		
		//create a solvable game
		int i = 0;
		while(!isLegalGameState() && containsValue(0)){
			Random rand = new Random();
			for(int r = 0; r < puzzle.length; r++){
			for(int c = 0; c < puzzle[0].length; c++){
				int selectedNum = rand.nextInt(9)+1;
				if(isValidMove(r,c,selectedNum)){
					puzzle[r][c] = selectedNum;
					init[r][c] = true;
				}
			}
			}
			
			i++;
			
			if(i % 100 == 0) puzzle = new int[9][9];
		}
		
		//remove numbers
		int whitespace = 0;
		switch(gameMode){
			case EASY: whitespace = 35;   break;
			case MEDIUM: whitespace = 45; break;
			case HARD: whitespace = 50;   break; 
			case XTREME: whitespace = 55; break;
		}
		
		int totalBlanks = 0;
		Random rand = new Random();
		while(totalBlanks < whitespace){
			int r = rand.nextInt(9);
			int c = rand.nextInt(9);
			if(puzzle[r][c] != 0){
				puzzle[r][c] = 0;
				init[r][c] = false;
				totalBlanks++;
			}
		}
	}
	
	@Override
	public void paint(Graphics go){
		Graphics2D g = (Graphics2D) go;
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		
		for(int r = 0; r <= puzzle.length; r++){
		for(int c = 0; c <= puzzle[0].length; c++){
			if(r < 9 && c < 9){
				if(puzzle[r][c] == FLAGGED){
					//highlight bars
					g.setColor(new Color(0,30,100,50));
					g.fillRect(0, r*size, size*9+3, size);
					g.fillRect(c*size, 0, size, size*9+3);
					puzzle[r][c] = RESET;
				}
				
				//numbers
				if(init[r][c] == true) g.setColor(new Color(0,0,0,175));
				else g.setColor(new Color(0,30,100,150));
				Font myFont = new Font("Comic Sans MS", Font.PLAIN, size);
				g.setFont(myFont);
				if(puzzle[r][c] != RESET) g.drawString(puzzle[r][c] + "", c*size+(size/4), r*size+size-(size/9));
				
				//boxes
				g.setColor(new Color(0,0,0,175));
				g.drawRect(c*size, r*size, size, size);
				
			}else{
				//bold boxes
				if(r%3==0 && c%3==0){
					g.setColor(Color.black);
					g.fillRect(c*size, 0, 3, size*9+3);
					g.fillRect(0, r*size, size*9+3, 3);
				}
			}
		}
		}
	}
	
	public boolean isLegalGameState(){
		int sum = 0;
		for(int i = 1; i < 10; i++) sum += i;
		
		//row sum
		for(int r = 0; r < puzzle.length; r++){
			int rSum = 0;
			for(int c = 0; c < puzzle[0].length; c++) rSum += puzzle[r][c];
			if(rSum != sum) return false;
		}
		
		//column sum
		for(int c = 0; c < puzzle[0].length; c++){
			int cSum = 0;
			for(int r = 0; r < puzzle.length; r++) cSum += puzzle[r][c];
			if(cSum != sum) return false;
		}
		
		//3x3 grid sum
		for(int i = 0; i < 9; i +=3){
		for(int j = 0; j < 9; j+=3){
			int sSum = 0;
			for(int r = i; r < i + 3; r++){
			for(int c = j; c < j + 3; c++){
				sSum += puzzle[r][c];
			}
			}
			if(sSum != sum) return false;
		}
		}
		
		return true;
	}
	
	public boolean isValidMove(int row, int col, int num){		
		int[] square = new int[2]; //coordinates of square current click exists in
		
		for(int r = 0; r < puzzle.length; r += 3){
		for(int c = 0; c < puzzle[r].length; c += 3){
			if( (row >= r && row < r + 3) && (col >= c && col < c + 3) ){
				square[0] = r;
				square[1] = c;
				repaint();
			}
		}
		}
				
		//legal within row
		for(int c=0; c<puzzle[0].length; c++){
			if(c!=col && puzzle[row][c] == num) return false;
		}
				
		//legal within column
		for(int r=0; r<puzzle.length; r++){
			if(r!=row && puzzle[r][col] == num) return false;
		}
				
		//legal within square
		for(int r = square[0]; r < square[0] + 3; r++){
		for(int c = square[1]; c < square[1] + 3; c++){
			if( (r!=row && c!=col) && puzzle[r][c] == num) return false;
		}
		}
				
		return true;
	}

	public boolean containsValue(int val){
		for(int i = 0; i < puzzle.length; i++){
			for(int j = 0; j < puzzle[i].length; j++){
				if(puzzle[i][j] == val) return true;
			}
		}
		return false;
	}
	
	@Override
	public void mouseClicked(MouseEvent click) {
		for(int x = 0; x <= getWidth() - size; x += size){
		for(int y = 0; y <= getHeight() - size; y += size){
			if( (click.getX() >= x && click.getX() < x + size) && (click.getY() >= y && click.getY() < y + size) ){
				if(puzzle[y/size][x/size] == 0) puzzle[y/size][x/size] = FLAGGED;
				flaggedCoordinate = new int[]{y/size, x/size};
				repaint();
			}
		}
		}
	}
	
	@Override
	public void keyPressed(KeyEvent e){
		int inputNum = 0;
		switch(e.getKeyCode()){
			case KeyEvent.VK_NUMPAD1:
			case KeyEvent.VK_1:
				inputNum = 1;
				break;
			case KeyEvent.VK_NUMPAD2:
			case KeyEvent.VK_2:
				inputNum = 2;
				break;
			case KeyEvent.VK_NUMPAD3:
			case KeyEvent.VK_3:
				inputNum = 3;
				break;
			case KeyEvent.VK_NUMPAD4:
			case KeyEvent.VK_4:
				inputNum = 4;
				break;
			case KeyEvent.VK_NUMPAD5:
			case KeyEvent.VK_5:
				inputNum = 5;
				break;
			case KeyEvent.VK_NUMPAD6:
			case KeyEvent.VK_6:
				inputNum = 6;
				break;
			case KeyEvent.VK_NUMPAD7:
			case KeyEvent.VK_7:
				inputNum = 7;
				break;
			case KeyEvent.VK_NUMPAD8:
			case KeyEvent.VK_8:
				inputNum = 8;
				break;
			case KeyEvent.VK_NUMPAD9:
			case KeyEvent.VK_9:
				inputNum = 9;
				break;
			case KeyEvent.VK_ENTER:
				System.out.println(isLegalGameState());
				break;
		}
		
		if(isValidMove(flaggedCoordinate[0],flaggedCoordinate[1], inputNum)){
			puzzle[flaggedCoordinate[0]][flaggedCoordinate[1]]= inputNum;
			repaint();
		}
	}
	
	@Override
	public void componentResized(ComponentEvent arg0) {
		size = (getWidth() < getHeight())? getWidth()/9 : getHeight()/9;
		repaint();
	}
	
	//buffering http://bit.ly/2kvDOks
	Image boi;
	Graphics bog;
	@Override
	public final void update(java.awt.Graphics g) {
		boi = createImage(getWidth(), getHeight());
		bog = boi.getGraphics();
		bog.setColor(getBackground());
		bog.fillRect(0, 0, getWidth(), getHeight());
		bog.setColor(getForeground());
		paint(bog);
		g.drawImage(boi, 0, 0, this);
	}

	public void mouseEntered(MouseEvent arg0){}public void mouseExited(MouseEvent arg0){}public void mousePressed(MouseEvent arg0){}public void mouseReleased(MouseEvent arg0){}
	public void keyTyped(KeyEvent arg0) {}public void keyReleased(KeyEvent arg0) {}
	public void componentHidden(ComponentEvent arg0) {} public void componentShown(ComponentEvent arg0) {} public void componentMoved(ComponentEvent arg0) {}
}
